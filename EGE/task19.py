# Два игрока, Петя и Ваня, играют в следующую игру.
# Перед игроками лежат две кучи камней.
# Игроки ходят по очереди, первый ход делает Петя.
# За один ход игрок может добавить в одну из куч один камень или увеличить
# количество камней в куче в два раза. Например, пусть в одной куче 6 камней,
# а в другой 9 камней; такую позицию мы будем обозначать (6, 9).
# За один ход из позиции (6, 9) можно получить любую из четырёх позиций:
# (7, 9), (12, 9), (6, 10), (6, 18). Чтобы делать ходы, у каждого игрока есть
# неограниченное количество камней.
# Игра завершается в тот момент, когда суммарное количество камней
# в кучах становится не менее 62. Победителем считается игрок,
# сделавший последний ход, то есть первым получивший позицию, в которой в кучах
# будет 62 или больше камней.
# В начальный момент в первой куче было 10 камней,
# во второй куче – S камней, S:[1; 51].
# Будем говорить, что игрок имеет выигрышную стратегию,
# если он может выиграть при любых ходах противника.
# Описать стратегию игрока – значит описать, какой ход он
# должен сделать в любой ситуации, которая ему может встретиться
# при различной игре противника. В описание выигрышной стратегии
# не следует включать ходы играющего по ней игрока, которые не
# являются для него безусловно выигрышными, то есть не гарантируют
# выигрыш независимо от игры противника.

# Назовите минимальное S, при которых Петя может выиграть первым ходом,
# Назовите минимальное значение S, при котором Ваня может выиграть
# первым ходом в случае неудачного первого хода Пети.

def win_strategy(pile1, pile2, turn, finish):
    if pile1 + pile2 >= 62 or turn > finish:
        return turn == finish
    if turn % 2 == 1:  # если нечетный ход (or для того, кто "умный")
        return win_strategy(pile1 + 1, pile2, turn + 1, finish) or \
           win_strategy(pile1 * 2, pile2, turn + 1, finish) or \
           win_strategy(pile1, pile2 + 1, turn + 1, finish) or \
           win_strategy(pile1, pile2 * 2, turn + 1, finish)
    else:  # если четный ход (and для того, кто "дурак")
        return win_strategy(pile1 + 1, pile2, turn + 1, finish) and \
               win_strategy(pile1 * 2, pile2, turn + 1, finish) and \
               win_strategy(pile1, pile2 + 1, turn + 1, finish) and \
               win_strategy(pile1, pile2 * 2, turn + 1, finish)


# Задача 19
for stones in range(60):
    if win_strategy(10, stones, 1, 2):
        print('Минимальное S, при которых '
              'Петя может выиграть первым ходом:', stones)
        break

# Задача 20
print('Значения S, при которых Ваня может выиграть вторым ходом:', end=' ')
for stones in range(60):
    if win_strategy(10, stones, 1, 4):
        print(stones, end=' ')
